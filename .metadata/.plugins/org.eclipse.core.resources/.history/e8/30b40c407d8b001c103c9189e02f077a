package model.dao.impl;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.List;

import db.DB;
import db.DbException;
import model.dao.ElementDao;
import model.dao.MangaDao;
import model.entities.Element;
import model.entities.Manga;
import model.enums.Status;

public class MangaDaoJDBC implements MangaDao{
	
	Connection conn;
	
	public MangaDaoJDBC(Connection conn) {
		this.conn = conn;
	}

	@Override
	public void insert(Manga manga) {
		PreparedStatement st = null;
		
		try {
			
			st = conn.prepareStatement("INSERT INTO mangas "
					+ "(name, coverImage, siteLink, description, status, volume, chapter, userId) "
					+ "VALUES (?,?,?,?,?,?,?,?)");
			
			st.setString(1, manga.getName());
			st.setString(2, manga.getCoverImage());
			st.setString(3, manga.getSiteLink());
			st.setString(4, manga.getDescription());
			st.setString(5, manga.getStatus().toString());
			st.setDouble(6, manga.getVolume());
			st.setDouble(7, manga.getChapter());
			st.setInt(8, manga.getUser().getId());
			
						
		} catch (SQLException e) {
			throw new DbException(e.getMessage());
		}finally {
			DB.closeStatement(st);
		}
		
	}

	@Override
	public void update(Manga manga) {
		PreparedStatement st = null;
		
		try {
			
			st = conn.prepareStatement("UPDATE mangas\\r\\n"
					+ "SET name = ?,  "
					+ "coverImage = ?,"
					+ "siteLink = ?,"
					+ "description = ?,"
					+ "status = ?,"
					+ "volume = ?,"
					+ "chapter = ?,"
					+ "userId = ?"
					+ "WHERE id = ?");
			
			st.setString(1, manga.getName());
			st.setString(2, manga.getCoverImage());
			st.setString(3, manga.getSiteLink());
			st.setString(4, manga.getDescription());
			st.setString(5, manga.getStatus().toString());
			st.setDouble(6, manga.getVolume());
			st.setDouble(7, manga.getChapter());
			st.setInt(8, manga.getUser().getId());
			st.setInt(9, manga.getId());
			
			System.out.println(manga);
			
		} catch (SQLException e) {
			throw new DbException(e.getMessage());
		}
		
		
	}

	@Override
	public void deleteById(Integer id) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public Manga findById(Integer id) {
		PreparedStatement st = null;
		ResultSet rs = null;
						
		try {
			
			st = conn.prepareStatement("SELECT mangas.*,user.id as userId"
					+ "FROM mangas INNER JOIN user "
					+ "WHERE mangas.id = ?");
			
			st.setInt(1, id);
			rs = st.executeQuery();
			
			
		} catch (SQLException e) {
			throw new DbException(e.getMessage());
		}
		
		return null;
	}

	@Override
	public List<Manga> findAll() {
		// TODO Auto-generated method stub
		return null;
	}
	
	
	private Manga instantiateDepartment(ResultSet rs) throws SQLException {		
		Manga manga = new Manga();
		manga.setId(rs.getInt("id"));
		manga.setName(rs.getString("name"));
		manga.setCoverImage(rs.getString("coverImage"));
		manga.setSiteLink(rs.getString("description"));
		manga.setStatus(Status.valueOf(rs.getString("status")));
		return manga;		
	}
}
